%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% University/School Laboratory Report
% LaTeX Template
% Version 3.1 (25/3/14)
%
% This template has been downloaded from:
% http://www.LaTeXTemplates.com
%
% Original author:
% Linux and Unix Users Group at Virginia Tech Wiki 
% (https://vtluug.org/wiki/Example_LaTeX_chem_lab_report)
%
% License:
% CC BY-NC-SA 3.0 (http://creativecommons.org/licenses/by-nc-sa/3.0/)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%----------------------------------------------------------------------------------------
%	PACKAGES AND DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass{article}

\usepackage[version=3]{mhchem} % Package for chemical equation typesetting
\usepackage{siunitx} % Provides the \SI{}{} and \si{} command for typesetting SI units
\usepackage{graphicx} % Required for the inclusion of images
\usepackage{natbib} % Required to change bibliography style to APA
\usepackage{amsmath} % Required for some math elements 
\usepackage{todonotes}
\usepackage{wrapfig}
\usepackage{pbox}
\usepackage{geometry}
\newgeometry{left=2cm, right=2cm, bottom=2cm}
\setlength\parindent{0pt} % Removes all indentation from paragraphs

\renewcommand{\labelenumi}{\alph{enumi}.} % Make numbering in the enumerate environment by letter rather than number (e.g. section 6)

%\usepackage{times} % Uncomment to use the Times New Roman font

%----------------------------------------------------------------------------------------
%	DOCUMENT INFORMATION
%----------------------------------------------------------------------------------------

% \title{Energy Aware Software} % Title

% \author{\textbf{Principal investigator}: Simon Holmbacka\\ \AA{}bo Akademi University, Embedded Systems Laboratory} % Author name

\begin{document}
\huge{Energy Aware Software}\\\\
\normalsize\textbf{Principal investigator}: Dr. Simon Holmbacka\\ 
\textbf{Project starting time}: xxx\\
\textbf{Duration of the project}: xxx\\\\
\textbf{Site of research}:\\
\textit{\AA{}bo Akademi University} \\
\textit{Faculty of Science and Engineering}\\
\textit{Embedded Systems Laboratory}\\
\textit{Vattenborgsv\"{a}gen 5 20500 Turku, Finland}\\

\textbf{Sites for research cooperation:}\\





\begin{table}[h]
\begin{center}

\begin{tabular}{  l  l  }
\pbox{10cm}{\textit {IETR - INSA Rennes}\\\textit {Institut d'Electroniques et de T\'{e}l\'{e}communications}\\\textit{35708 Rennes Cedex 7, France}} & 
\pbox{10cm}{\textit {TU Wien}\\ \textit{Institute for Software Technology and Interactive Systems}\\\textit{1040 Favoritenstrasse 9-11 Vienna, Austria}}   \\ \\
\pbox{10cm}{\textit{FernUniversit\"{a}t in Hagen}\\ \textit{Fakult\"{a}t f\"{u}r Mathematik und Informatik}\\ \textit{58084, Universit\"{a}tstrasse 11, Hagen, Germany}} & 
\pbox{10cm}{\textit{Uppsala University}\\\textit{Department of Information Technology}\\\textit{75105, ITC, L\"{a}gerhyddsv\"{a}gen 2, Uppsala, Sweden}} \\ 
\end{tabular}
\label{tab:strconf}
\end{center}

\end{table}

\date{\today} % Date for the report

% \maketitle % Insert the title, author and date

\section{Rationale}
Energy efficiency in computer systems is currently a major concern in field computer engineering for several reasons such as increased frequency of the battery re-charge intervals, 
monetary cost because of high electrical consumption and thermal effects leading to increased cooling requirements with high noise levels. 
Furthermore, energy efficiency is also a concern for achieving increased performance.
One of the performance limits in current microprocessors because the Dennard scaling \cite{Dennard:74} is no longer valid. 
Dennard scaling forecasts that the power density of transistors stays constant as the manufacturing technology decreases. 
This means that as transistors become smaller, energy efficiency is improved by transistor technology such that the power remains in proportion to the area. 
In recent hardware, this scaling no longer applies since the voltage range used in transistors no longer can be lowered. 
The end of Dennard scaling brings consequences such as an disproportional increase in thermal dissipation leading to dark silicon, 
which means that all processing power on a chip cannot be used simultaneously because of the limited power envelope.\\

\begin{wrapfigure}{br}{6cm}
  \begin{center}
    \vspace{-1cm}
    \includegraphics[width=0.4\textwidth]{fig/workload.png}
  \end{center}
  \caption{Load calculated as a ratio between active and idle for a defined window (Gray rectangles represent an active CPU).}
  \label{fig:workload}
%   \vspace{-2cm}
\end{wrapfigure}

To tackle these problems, power management systems are implemented to scale the performance of the system according to the current resource demand. 
The resouce demand is measued as the utilization caused by the workload of the CPU. 
Workload in operating systems is measured as a sliding window average over an active and idle CPU as illustrated in Figure~\ref{fig:workload}. 
A high workload indicates that the system needs more resources, and the clock frequency is scaled up to decrease the workload on the CPU.
The problem with this approach is that the workload does not describe the performance of the applications.
High workload does not necessary mean that an application requires more performance, it simply describes how much the application is using the CPU.
For example, in case the CPU is set to decode a video, the workload will increase to 100\% as soon as the video frames are being decoded.  
This means that the CPU is clocked to the maximum frequency as long as the frames are being decoded and the decoded frame rate is only limited by the speed of the CPU; 
even if the required decoding rate is only 25 frames per second, which the human eye is capable of observing.
In other words, the application will be executed unnecessarily fast. 
As results from \cite{HolmbackaHipeac, HolmbackaDasip} show, executing the application unnecessarily fast wastes significantly more energy than executing the application on a moderate, 
but still at a sufficiently fast, performance level. 
The currently unsolved problem is to manage to execute an application on a moderate, yet sufficiently high, performance level. 
This means that applications are not involved in the power management decisions, nor does any interface between the applications and the runtime system to provide such facilities exist. 



What we propose is to \textbf{make the application software itself energy aware}.
This means that the applications can set performance requirement in their own metric, e.g. frames per second.
The runtime system monitoring the performance of the application then allocates the hardware resources to meet the demands of the applications.
In order for applications to communicate with the runtime system, three main parts are needed:
\begin{enumerate}
 \item A framework for expressing performance requirements in the applications
 \item A system monitoring the runtime performance of the applications
 \item A controller system which allocates resources based on information from the monitor and the performance requirements
\end{enumerate}
The three parts will be covered in this research project and described as follows:

\subsection{Application meta-data}
The main challenge in creating energy aware software is to enable the expression of resource requirements in applications.
As previously mentioned, the traditional way of solely monitoring the workload is a very innacurate and often counter productive both in terms of performance and energy.
We tackle this challenge by allowing the applications to express the resource requirements internally.
This means that the application should include a small part of code -- the meta-data -- which expresses the intensions of the application.
For example, the previously mentioned video decoder can demand a framerate of 25 frames per seconds instead of decoding as fast as possible.
\todo{More about meta-data}
\todo{Code example}
In theis research, we will investigate the types on meta-data needed to describe and appliction sufficiently in terms of performance requirements.
On of the challenges is to obtain a sufficiently descriptive form of meta-data that can be generalized to any application.
We will aim this research initially in pinpointing the required meta-data for generalizing resource requirements in software.
Once the meta-data descriptions have been established, the injection of the data into both new- and legacy applications must be achieved effort-less in order for the programmers to make the additional effort.
A trade-off between desriptiveness and programmer effort is to be expected.

\subsection{Feedback monitor}
Since applications in general are dynamic, the performance of the application depends on a wide set of factors such as memory intensity, use of caches, user interrupts, the data sizes and data types used, interaction with other applications etc. 
This means that the performance of an application cannot be guaranteed with fixed resources.
For example a completely black video frame requires much less resources for decoding than a video frame with many details and motions.
In order to adapt the resources allocated to the needs of the application, the application must be monitored at runtime.
Such a monitoring facility can determine the \textit{current} performance of the application to the \textit{required} performance annotated in the meta-data.
In case the currently allocated performance is either too high or too low, the monitoring framework allocates or deallocates resources to accommodate to the real resource requirement.
A main part of this research is therefore to create a proper monitoring framework.
Such a framework must be detailed enough to provide sufficient tools for measuring performance, but simple enough to reduce programmer effort.
Since the monitoring framework is a runtime system, significantly low overhead must be guaranteed to not interfere with the energy consumption and performance of the host system.

\subsection{Resource controller}


\subsection{Previous work}
% \begin{figure}[b]
% 	\centering
% 	\includegraphics[scale=0.1]{fig/featureimage.png}
% \end{figure}
The embedded systems lab in the \AA{}bo Akademi University has for the last six years focused on low power and energy aware software. 
During these years a special interest had been put in mobile phone processors and their significance for energy awareness in general. 
This is because it has been noted that the trend of performance requirements by far exceeds the battery capacity of a mobile device, especially since the mobile multi-core revolution \cite{BatteryCapacity,CPUCapacity}. 
This means that the performance of the hardware and the demand for performance of the user is greater than the energy a battery with limited dimensions can physically store. 
Because of the slow capacity increase in batteries, the available energy must be used more efficiently in order for such a mobile device to retain its usability.
In the thesis of the PI ``\textit{Energy Aware Software for Many-Core Systems}'' two guidelines were presented for creating energy aware software on modern many-core hardware. 
Implementing the recommendations in software has proven to reduce the energy consumption up to 50\% without degrading the performance \cite{HolmbackaHipeac}, especially on mobile multi-core hardware. 
The recommendations called ``Energy aware mapping'' and ``Energy aware resource allocation'' are used to tailor the resource allocation to the software executing, 
and a prototype runtime system was implemented as a phase of the PhD thesis. 
Using this software, practical state-of-the-art demonstrator were created, for example the Android app ``Low Energy Player'' available on Google store\footnote{https://play.google.com/store/apps/details?id=org.videolan.vlc.LEL.lite.green}
This research is intended to go beyond the state-of-the-art by the development of a programming framework for energy aware software and practical demonstrators.

\subsection{Related work}
``Low energy programming'' or ``Low power programming'' has previously existed in the form focusing on the programming paradigm or on the programming syntax. 
Guidelines from Intel \cite{IntelLowPower} suggests the use of a certain level of loop unrolling, vectorization, memory intensity cache usage etc.
for achieving maximum energy efficiency in combination with Intel compiler tools. 
Such recommendations are applied only on the algorithms in the program, and do not cover, the intention of the program for functioning efficiently together with the runtime system allocating the resources. 
The low power programming guidelines from Intel also require the programming to construct the program in a certain way in order to become energy efficient, 
and the underlying hardware architecture must be known. 
In the thesis ``Developing Energy-Aware Software'' by Brinke \cite{Brinke:15} the author describes programming languages for modularity and modeling resource consumption for software.
The \textit{awareness} of energy, is tightly bound to the application code and the programmer is expected to follow certain programming patterns to make the software energy aware.
On the contrary, the planned framework for energy efficient software requires only the insertion of meta-data in the software.
This means minimal effort of the programmer and the application algorithms can be implemented without influence over the energy awareness.
The resource requirements are specified using a simple library, where after the runtime environment allocates the required resources.

The \textbf{Carbon Research Group}\footnote{http://groups.csail.mit.edu/carbon/} at MIT has developed a heartbeat framework to evaluate performance as a generic parameter in software construction. The framework is capable of measuring performance of any application as a generic parameter by user inserted API calls to the heartbeat library. Measuring performance is the necessary first step when constructing a feedback-based control system. For example it enables the possibility to measure the framerate in a video decoder, but a controller is then needed to allocate the resources in order to keep the performance on a given setpoint. We consider using the heartbeat framework for measuring generic performance in our energy awareness framework, but we plan to extend the framework considerably in order to add the controller for allocating resources.\\

The \textbf{Hardkernel} project\footnote{http://www.hardkernel.com/main/main.php} creating the Odroid family boards recently released the Global Task Scheduling (GTS) support for the ARM big.LITTLE devices. ``High performance threads'' are scheduled to the big high performance cores and ``Low performance threads'' are scheduled to LITTLE energy efficient cores based on the workload activity of the threads in order to save energy. 
Even though the activity level of a thread is an early attempt introduce energy awareness in the system, the practical results are poor. 
In other words, the scheduler most often schedule a thread on \textit{the wrong core}. 
This results not only in poor energy efficiency, but also in poor performance of the applications and poor user experience. 
We intend to use this platform as one of the reference models for our energy awareness framework because its SoC is very popular and is being used in millions of Android devices worldwide.\\

Our research group is currently a partner in the \textbf{INTERSYS} project\footnote{http://iot4health.utu.fi/?p=374} dedicated to standardize and optimize interconnected IoT devices handling streaming data. Since the number of IoT devices are expected to rapidly increase in the near future, the project is extending interoperability notions for handling the massive amount of data streams from small devices to gateways and servers. 
Still missing in the field of IoT is the notion of energy awareness, which is a crucial point as most devices operate on battery-only power and are expected to operate for long time intervals. 
We intend to work closely with this project and we plan to introduce the notion of energy awareness in IoT systems.\\

\textbf{EMBECOSM}\footnote{http://www.embecosm.com/} focus on providing the GCC compiler with the notion of energy efficiency, in practice this means learning which compiler flags that minimizes the energy consumption for a selected architecture. 
The outcome of this project is similar to OpenTuner \footnote{http://opentuner.org/} from MIT, which is capable of offline optimization of multi-criteria problems. 
Both projects provide a metric for offline optimization but runtime support, which we suggest, is not stated in their scope. 
Runtime optimization is critical in virtually any environment containing multi-node and heterogeneous multi-node platforms. 
This is because the data used in especially streaming applications like multi-media software is arbitrary or very difficult to predict. 
Compile time optimizations can for example not predict what kind of video format is being used in a video decoder.\\

The \textbf{StarPU}\footnote{http://starpu.gforge.inria.fr/} project at INRIA Bordeaux has presented a runtime system to minimize the performance for heterogeneous architectures. 
The system builds a performance model of the implemented CUDA or OpenCL kernels based on benchmarking on CPUs and GPUs, after which the system is able to schedule the kernels onto the most performance efficient device. 
The \textbf{PEPPHER}\footnote{http://www.peppher.eu/} project has used StarPU as a backend and the outcome of the project is a tool capable of generating multi-variant tasks for StarPU (OpenMP, OpenCL etc.). 
However, StarPU only consider the optimizations in form of performance. 
When adding more complex criteria with multiple variables such as energy efficiency or monetary cost, StarPU lacks the insight to such resource allocation.

\section{Objectives and expected results}

\subsection{Objectives}
\begin{wrapfigure}{tr}{5cm}
  \begin{center}
  \vspace{-0.8cm}
    \includegraphics[width=0.26\textwidth]{fig/netflix.png}
  \end{center}
  \caption{Quality-of-Service as a left click option in the Netflix app on Android}
  \label{fig:netflix}
  \vspace{1.5cm}
\end{wrapfigure}
Our current design recommendations for energy aware programming described in the thesis of the PI extends the application to signal resource requirements to the runtime system which allocates the hardware resources.
\textbf{The objectives of this research is to develop a framework for programming energy aware software.}
By using the framework, the programmer can specify resource requirement or ``Quality-of-Service'' requirements directly in the souce code.
Furthermore, the end-user of the software might- or might not be able to influence these requirements at runtime.
For example, a video decoder might occasionally experience buffer underruns in case the decoding framerate is too low.
By safe guarding, by using a slightly higher setpoint, the video playback becomes more smooth at the cost of slightly higher energy consumption.
Figure \ref{fig:netflix} illustrates for example the ability to add a Quality-of-Service option to the Netflix app running on Android.
The user can use this option to select the trade-off between energy savings and performance in terms of decoding framerate or other parameters. 
Options can set based on a defined value like ``decoding framerate'' or as a more abstract option as illustrated in Figure \ref{fig:slider}. 
The intension of the energy aware framework is to expose the link between the application and the runtime system, while the design of using its abilities is up to the programmer.
\begin{wrapfigure}{rt}{7cm}
  \begin{center}
  \vspace{-0.8cm}
    \includegraphics[width=0.4\textwidth]{fig/slider.png}
  \end{center}
  \caption{Slider option for QoS in Android app}
  \label{fig:slider}
%   \vspace{-2cm}
\end{wrapfigure}

dsgfdsf sdfg dsfg dsfgsdgfsdgs
dsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgs
g

dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgsdsgfdsf sdfg dsfg dsfgsdgfsdgs

\subsection{Hypothesis}
The project states the following Hypotheses:
\begin{enumerate}
 \item Performance requirements in computer systems will continue to increase significantly faster than battery technology development, software must thus utilize the resources more efficiently.
 \item Energy aware software can utilize the hardware resources more efficiently because hardware resources are allocated based on actual performance requirements.
 \item Software can be made energy aware with minimal performance overhead and minimal programmer efforts.
 \item 50\% of energy can be saved using energy awareness in software.
\end{enumerate}


\subsubsection{Previous work on energy aware software}
In previous work, Eyerman et al. \cite{Eyerman:09} claim that no single throughput metric is fundamentally generic for multiprogram workloads. 
Performance should instead be expressed as related to the internal single case-study; a direction adopted in this research. 
We plan to integrate this direction of thinking into user defined meta-data that expresses resource requirements in software.

In early research, a high-level language CQML \cite{Aagedal:01} was suggested for describing QoS requirements integrated in UML. 
CQML links a high level QoS description to system performance, and can describe system actions based on the result. 
Applications specify a performance setpoint and a lower bound acceptable performance level in context of the application. 
Applications then monitor own performance and signal this value to the QoS manager periodically. 
Similar notations as this the language will be considered in this research to describe QoS in applications, 
but more focus will put on the link between applications and hardware resources in a single computer system.
Our methods for energy aware programming will not be strongly tied to a certain programming language and the framework itself will have the flexibility to be integrated from various programming environments such as servers and PC Linux and Android.

% Hoffmann et. al propose heartbeats \cite{Hoffmann:10} as a generic performance parameter. 
% The heartbeats are setup by including a set of heartbeat API calls in applications, which are used to monitor the application performance. 
% By calling the heartbeat API on suitable places in the applications such as large loops, a notion of the update interval between API calls is created. 
% The heartbeat API registers multiple applications and the outside system monitors the heartbeat of each application separately. 
% Heartbeats is a suitable candidate, and fully compatible as a performance parameter in our research framework.
% An application can register a setpoint heartbeat after which the heartbeat monitor is used to derive the actual performance in heartbeats. 
% Earlier work by Vetter et al. \cite{Vetter:02} presents a similar approach, but by including performance assertions directly into the code. 
% Based on the assertions, the application can adapt itself in case significant performance is not achieved.
% The system allowed, however, only internal monitoring of the performance, and a runtime system was not in the scope.

On the other hand, runtime systems for minimizing energy consumption in computer systems have been previously proposed.
The PowerDial \cite{Hoffmann:11} approach allows graceful degradation in applications based on current application performance measured in heartbeats \cite{Hoffmann:10}. 
The system transforms application parameters (such as peak-signal-to-noise in a video) into dynamic control variables stored in the application itself. 
A callback function is inserted into the application using which the controller is able to adjust the control variables according to performance and policies.
A heartbeat feedback monitors the execution and reports on the updated performance of the application. 
Also, the work by Segovia \cite{Segovia:11} suggests graceful degradation of the application QoS by monitoring a happiness value from the application. 
Based on this value, the runtime system can degrade quality points in the application in order to achieve the requested QoS. 
Our planned runtime system is inspired by the same approach to treat input signals from applications: the performance is transformed into a generic parameter – QoS – upon which the controller acts.
In contrast, our controller uses no graceful degradation in the applications, but the actual hardware actuators to allocate resources.

In previous research, there have been a strong separation between monitor and control.
Several research projects offer the opportunity to monitor an executing application, but supports no control of the hardware.
On the other hand, many controller-based research project do not support any proper framework for declaring meta-data requirements and monitoring of the execution.
This research project will tie both parts together with the main focus on reducing the energy consumption with minimal programmer effort -- an effort not previously done.
Our research project will also make the proper balance between academic research and practical usability,
which means that there is both a focus on planning the long term usage of the framework in terms of capabilities and scalability, but also practical efforts to enable a programmer to pick up the tools and start developing energy aware software in the industry.

\section{Expected scientific and societal impacts and potential breakthrough of the research}
Our expected impact is on the research community is to address the energy awareness in software. 
In other words, the need for communication between the application layer and the runtime environment. 
We expect to determine the information flow needed to create energy aware software especially for heterogeneous architectures. 
Our potential breakthrough is to introduce \textbf{energy awareness as natural part of programming}.\\ 
For decades it has been a natural step to introduce meta-data in the software for creating parallel programs. 
The programmer has been willing to add \#pragmas in OpenMP, Keywords in Cilk or Initializations in OpenCL to create parallel software because of the minimal programming effort and significant performance gain. 
We intend to extend this notion to energy awareness, and demonstrate the potential reward in terms of energy efficiency. 
Furthermore, the development of runtime systems becomes more straight forward. 
Without energy aware programming as the underlying notion, runtime systems in any domain have no common ground on which the decision making is based. 
Optimizations remain based on ad-hoc ideas and ``hacked'' hard-code which is usually not portable between either domains or even between different architectures. 
Even though the implementation of the runtime systems between domains can be different, the core idea of resource allocation decisions based on energy aware programming remains common. 
With this common denominator, runtime systems engineers between projects and domains can incorporate shared ideas for implementing new, or improving existing runtime systems. 
For example the GTS scheduler appearing in most high-end Android phones and tablets is currently highly inefficient due to a poor decision making model. 
Moreover, its implementation model is completely isolated from any other runtime system – leaving it highly unportable. 
By introducing the notion of energy aware programming, the development of runtime systems needed in any modern computer system has the potential to shift from an ad-hoc single-purpose environment to a sharing environment where engineers have a better platform to cooperate on.

\subsection{Applicability}
\begin{itemize}
 \item Energy efficient programming: Today most guidelines for energy efficient programming is driven by creating code with efficient algorithms such as using loop unrolling, SIMD vectors, compiler options etc., which generates software specifically for a given platform. 
 By instead relying on application meta-data describing software requirements, similarly as Cilk and OpenMP handle forking and joining task, resource allocation is based on what the software actually needs instead of blindly following the workload of the system.
 \item Performance portability: one of the major obstacles within the embedded industry is the high portability costs of software which is due to the requirements for high customization of software to particular embedded architectures. 
 With the suggested energy awareness framework, the mapping and scheduling decisions are shifted from the developer to the runtime system. 
 This allows a more architecture generic programming paradigm while still keeping the performance of dedicated code.
 \item Development of runtime systems: Using the energy awareness framework, the development time of runtime systems is not only decreased but also more standardized. 
 Even potential for automatic runtime system generation emerges as a result of standardizing the foundation.
 \item Fog computing is currently being proposed as an implementation framework for the IoT. 
 In the fog heterogeneous computing nodes are scattered in the network to enable computations neared to the source to guarantee real-time properties. 
 IoT systems are one the most energy-prone fields of computer engineering because many of such systems are designed to run for long intervals without being connected to the power grid. 
%  Currently there are no standardized mechanism for declaring energy awareness in IoT systems. 
 The framework for energy aware programming is extendable to IoT system as well because the paradigm only requires the ability of inserting resources requirement meta-data into the application software. 
\end{itemize}

\subsection{Critical points for success}
Our intension is not only to provide theoretical insights into energy aware software, but also the framework needed to enable the programming.
Access to hardware platforms is therefore crucial for this project.
As the framework for energy aware programming is applicable in an interdiciplinary domain, we intend to apply for accesability to large scale cloud platforms like Amazon and to Android based platforms.
However, our team has previously obtained the Amazon EC2 grant\footnote{https://aws.amazon.com/grants/} twice enabling access to large scale servers.
The PI also has connections to the energy efficient middleware group in ARM Cambride, the leader of which was invited to one of our project workshops in the PARALLAX project.
\todo[inline]{Alternative approaches}

\subsection{Publication plan}
We intend to publish at the top journals and conferences based on the JuFo listings, and we will select publication venues that use some form of open access model, most likely green open access. 
To this end a lump yearly sum is included to cover the publication fees. 
Further, we plan to also be visible in industrial event and fares to both demonstrate and get feedback on our reseach work.
The publication rate with regard to the project is approximately 3--4 high-quality peer-reviewed publications per year.

\section{Research methods and material, support from research environment}
% Stream Computing has been introduced as a paradigm in Cloud Computing and Big Data to emphasize the streaming nature of modern computing applications. 
% Such applications typically pull multiple streams of data and process these under real-time constraints. 
% Examples of such systems include video playback systems, web servers, digital filtering systems, telecommunications systems and other multi-media systems. 

We are working extensively within the \textit{streaming applications} paradigm for a number of reasons. 
Firstly, streaming systems are usually implemented in environments in which energy efficiency is of essence like video playback systems, web servers, digital filtering systems, telecommunications systems and other multi-media or IoT systems. 
Secondly, since the content of the streaming data is to a large extent arbitrary, no compiler based optimization (or other static solution) can solve the energy problem. 
The software itself must therefore be energy aware, and backed up by a runtime systems making online decisions. 
Thirdly, streaming systems are extremely common and is thus providing a large market to work on from tiny IoT systems up to large cloud server systems.

The work is highly experimental based, and to validate our approach we need to develop characteristic benchmarks. 
During the last years our group has gained considerable experience in developing our on benchmarks, as well as our own measurement setups. 
Results have been summarized in our extensive technical report \cite{HolmbackaTechrep}. 
% Combining these four research methods we aim to deliver an energy aware programming framework verified by accurate benchmarks for end-users to use.

\subsection{Management of research material and data}
The project will create two kinds of concrete results: 1. Software, and 2. Measurement data. 
We subscribe to the idea of open reproducible science. 
The computer architecture area has suffered from problems with reproducibility in that often neither the software nor the full measurement data are available. 
We intend to be as open as possible about our research. 
All software will be released under an open-source license. 
Zenodo\footnote{http://zenodo.org/} has been selected as the platform where we plan to publish measurement results and each submission in Zenodo can get a citable DOI.

\subsection{Support form research environment}
The research team will be well supported by infrastructure available at through the Centre for Computer Science (TUCS), 
which is a joint research institute of University of Turku and \AA{}bo Akademi University. 
% TUCS conducts basic and applied research in computer science and engineering. 
TUCS boasts a long history of high-level achievements of its affiliated researchers, in terms of articles in high-level journals and conferences, high number of citations, 
invitations to speak in the most important conferences in the field, and memberships in editorial boards of many high-level international journals. 
TUCS has been a Center of Excellence of Research of the Academy of Finland in the very first round of such centers in Finland, 1995-1999. 
A unit of TUCS, the Centre for Reliable Software Technology (CREST), has also been a Center of Excellence during 2002-2007. 
% Two Academy Professors, as well as three FIDIPRO professors have been / are affiliated with TUCS. 
% TUCS is hosting the research activity of Academician Arto Salomaa.


The PI is an active member of the COST action IC1305 Network for Sustainable Ultrascale Computing and the Energy Efficient High Performance Computing Working Group (EE HPC Working Group). 
Joint articles have been published in the COST action between the PI in \AA{}bo Akademi University and the group in TU Wien led by Ivona Brandi\'{c} and one between the PI and the group in University of Tirana led by Neki Frasheri, once of which to appear in IEEE Transactions.

The ESLab is leading the energy efficient computing module of the EIT ICT Labs Master School in Embedded Systems and is actively participating in the activities of the thematic action line Smart Energy Systems of EIT ICT Labs.
The PI together with EIT Digital recently released an online Coursera course on the subject in ``Development of Real-Time Systems''\footnote{https://www.coursera.org/learn/real-time-systems/} currently followed by over 2500 students world-wide.

Our team has a full time lab technician constructing specialized equipment needed in our experimental work. 
The team therefore has strong knowledge in manufacturing measurement tools for externally probing and measuring running systems. 
Crucial to our experiments is our open hardware datalogger with full Linux tool support capable of high-sample power measurement measurements with 0\% performance overhead in the host system. 

The team is experienced in building tools based on the theoretical models that enable the use of the models in practice. 
Some of the previous programming tools created by \AA{}bo Akademi University is the Canals data-flow language and the RVC-CAL to OpenCL translator. 
This competence will be put to good use in creating the energy aware programming framework.

\subsection{Utilization of research infrastructure}
\todo[inline,color=orange]{Points here}

\section{Ethical issues}
This research project has no ethical issues.

\section{Implementation: schedule, budget, distribution of work}

% \begin{figure}[h]
% 	\centering
% 	\includegraphics[scale=0.45]{fig/schedule.pdf}
% 	\caption{Time schedule for the project}
% 	\label{fig:schedule}
% \end{figure}

\subsection{Work packages}
\subsubsection{WP1 -- State of the art and exposing the meta-data}
The initial part of the project is to determine how to expose the meta-data to the progammer.
Therefore the project begins with a state-of-the-art review of currently proposed solutions for defining performance requirements.
The WP is intended to firstly define what exactly should be included in the meta-data to get a proper description of performance in applications. 
Further, what must be determined is guidelines for how, where, and when the meta-data should be injected in software to ensure stability and minimal performance overhead.
Included in this WP is tool support for automatic meta-data injection based on the findings earlier in the WP.
\begin{itemize}
 \item Tasl 1.1 State-of-the-art review \vspace{-0.3cm}
 \item Task 1.2 Defining the meta-data \vspace{-0.3cm}
 \item Task 1.3 Injecting the meta-data in software \vspace{-0.3cm}
 \item Task 1.4 Tools for introducing meta-data in software \vspace{-0.3cm}
\end{itemize}

\subsubsection{WP2 -- Feedback monitor}
WP2 covers the monitoring of the application software.
This includes how to interconnect the monitor with the application, determine the information flow between the application and the monitor and also how to forward this information to the resource allocation controller.
The main problems to tackle here is how the application software can be monitored without affecting the functionality or the performance of the system.
State-of-the-art monitoring systems such as the MIT heartbeats \cite{Hoffmann:10} will be evaluated as complementary research to the proposed energy awareness monitor.
A monitoring interface will be developed and its crossdomain applicability will be evaluated on Android, PC and server systems.

\begin{itemize}
\item Task 1.1 Evaluate complementary work and possible integration \vspace{-0.3cm}
\item Task 1.2 Construction of the monitoring interface and framework \vspace{-0.3cm}
\item Task 1.3 Crossdomain evaluation of monitoring system
\end{itemize}

\subsubsection{WP3 -- Energy aware controller}
WP3 is about using the meta-data definitions in WP1 and the monitoring data from WP2 and use it for energy optimizations by a runtime system controller.
The main challenge in WP3 is to define the resource allocation to achieve maximal energy efficiency.
Several well established optimization methods based on system models will be evaluated.
This means firstly modeling the underlying system and secondly applying mathematical optimization methods on the model.
The work was initiated in the thesis of the PI, and WP3 is intended to refine the optimization methods for a larger selection of platforms and improve on existing optimization methods.
WP3 also include the implementation of tools for automatic model generation for increasing the portability of the framework and finally the implementation of the runtime system controller itself.
\begin{itemize}
 \item Modeling energy consumption \vspace{-0.3cm}
 \item Tools for generating energy models \vspace{-0.3cm}
 \item Adopting optimization methods for energy efficiency \vspace{-0.3cm}
 \item Implementation of runtime controller
\end{itemize}

\subsubsection{WP4 -- A framework for energy aware programming and demonstrator}
\begin{itemize}
 \item Construction of API (Library / pragma)
 \item Single use-cases
 \item Demonstrator
\end{itemize}


\subsection{Budget}
We expect the project to proceed according to the schedule in the figure.
The budget of the project is defined in the following table:
\begin{table}[h]
\begin{center}
% \caption{}
\begin{tabular}{ | l | c | c |c |c |}
\hline
{Cost} & {2017} & {2018} & {2019} & {2020} \\ \hline
{Salary Post-doc} & xxx & xxx & xxx & xxx \\ \hline
{Travel} & xxx & xxx & xxx & xxx  \\ \hline
{Open access fees} & xxx & xxx & xxx & xxx  \\ \hline
{Mobility} & xxx & xxx & xxx & xxx  \\ \hline
{Total} & xxx & xxx & xxx & xxx  \\ \hline
\end{tabular}
\label{tab:strconf}
\end{center}

\end{table}

\section{Research team and collaboration}
\subsection{Collaboration}
The team is internationally well connected and has established cooperation with several teams abroad. 
The cooperations listed here are the ones relevant to this application and that are documented through joint publications.

The cooperation between Prof. Jean-Francois Nezan, INSA, Rennes, and the embedded systems lab has concentrated on the run-time management of dataflow networks, 
and has been executed through exchange of PhD students.
INSA de Rennes has a strong background in tool support. 
The previously developed PREESM tool which was used to determine parallelism in data-flow programs to be used in a power optimizer developed by \AA{}bo Akademi University.
This work resulted in the best paper award at the 2014 DASIP conference and is of great importance in WP1 and the demonstrators in WP3.
The PI visited INSA de Rennes for 4 months in 2013-2014, which resulted in two journal publications and two proceedings publications.

Previous exchanges between \AA{}bo Akademi and INSA de Rennes:\\
* Jerome Gorin (INSA $\longrightarrow$ \AA{}bo) Spring 2010\\
* Andreas Dahlin (\AA{}bo $\longrightarrow$ INSA) Spring 2010\\
* Julien Heulot (INSA $\longrightarrow$ \AA{}bo) Autumn 2013\\
* Simon Holmbacka (PI) (\AA{}bo $\longrightarrow$ INSA) Winter 2013-2014\\

A cooperation between Holmbacka and Prof. J\"{o}rg Keller at the Fernuniversit\"{a}t in Hagen started in 2014, since which we have worked on energy efficient scheduling for multi-core systems. 
The lab group in Hagen has previously worked on performance models for very parallel systems such as the Intel SCC.
One scientific journal and one proceedings publication about energy efficient scheduling has been published during this cooperation,
and this connection is therefore important mainly for the energy optimization in WP2 and the construction of the controller in WP2.
The PI is currently working in Hagen as a Post-doc exchange, and the cooperation with FernUni is currently very active.

The PI has been cooperating with the Electronic Commerce Group in TU Wien led by Prof. Ivona Brandi\'{c} since spring 2015. 
Work on cost and energy efficient cloud scheduling was done by extending the Philharmonic cloud simulator\footnote{http://philharmonic.github.io/} created at TU Wien with a multi-core model developed at \AA{}bo Akademi University. 
A journal has been accepted in the IEEE Transactions journal as a result of this cooperation.

The most recent of my collaboration network is Alexandra Jimborean from Uppsala University in Sweden.
Their lab group is working on compile-time and runtime code analysis and transformation for performance and energy efficiency.
Complementary to our lab, she is working on low level optimizations in memory and caches, which is useful when realizing the final framework in WP3.
We are currently planning cooperation work on meta-data based energy efficient scheduling in big.LITTLE systems.\\

\textbf{Summary of past mobilities by the PI}\\

\textbf{Project: Post-Doc research}\\
\textsl{Partners: J\"{o}rg Keller, FernUniversit\"{a}t in Hagen, Germany}
\hfill September 2015 -- ongoing

\textbf{Project: Energy Efficient Cloud Simulation}\\
\textsl{Partners: Dra\v{z}en Lu\v{c}anin, Ilia Pietri, Ivona Brandi\'{c}, TU Vienna, Vienna, Austria}
\hfill May 15 -- May 30 2015

\textbf{Project: Power-Aware HEVC Decoding with Tunable Image Quality}\\
\textsl{Partners: Erwan Nogues, Maxime Pelcat, INSA de Rennes, France}
\hfill October 2013 -- March 2014

\textbf{Project: Innovation and Creativity for Complex Engineering Systems}\\
\textsl{Partners: Jo\~{a}o Fernandes, Universidade do Minho, EFACEC Inc., Portugal}
\hfill January 31 -- 17 February 2012

\textbf{Project: Safe Motor Controller in Mixed-Critical Environment}\\
\textsl{Partners: Jos\'{e} Luis Guti\'{e}rrez, University of Granada, Spain \\ Miguel M\'{e}ndez, Seven Solutions Inc., Spain} 
\hfill November 5 -- November 17 2012

\subsection{Relation to strategic centers of research}
Since the Strategic Centres for Science, Technology and Innovation are being shut down, there is no concrete cooperation planned. 
However many of the SHOKs are planning new ways to continue their activities and since Prof. Lilius of the Embedded Systems Lab in \AA{}bo Akademi is a member of the FIMECC SG, 
he will have the opportunity to connect up the work in this project with the work done within FIMECC.


\section{Researcher training and research careers}
\textbf{Researcher training and supervision}: The supervision of PhD students are carried out as teamwork within participating senior researchers, 
but every student has also official supervisors with whom the student makes a study and research plans according to the university regulations. 
Each laboratory consists of researchers at various levels of their research career. 
It is paramount for all of them (including professors, researchers and staff) to periodically participate in the researcher training programs and renew their education/training.\\ 
\textbf{Promotion of Research Career}: With the current application, we seek funding for a post-doc researcher to work full-time within the project. 
Combined with the international co-operation, exchange period and close interaction between participating institutes, the project gives to the involved post-doc good basis to proceed in the academic career after the project.

\section{Mobility plan}
We plan a 6 months of mobility per year. The first mobilities are as follows:
\begin{itemize}
 \item Simon Holmbacka will visit Prof. Jörg Keller for 6 months in the middle
of the project (visit to start XXX) to work on energy efficient scheduling issues in WP2
\item ????
\item ????

\end{itemize}


The exact details of the mobilities 2018$\longrightarrow$ will be defined later in the project
schedule.


\bibliographystyle{alpha}

\bibliography{sample}

%----------------------------------------------------------------------------------------


\end{document}